@page "/"
@inject HttpClient Http
@inject IJSRuntime JsRuntime

@if (_seleniumScaffolderSettingsInput == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <h4>Bulk Import Page Elements</h4>
        <div class="col-12">
            <div class="mb-3">
                <div class="head">Selenium Scaffolder Settings YAML</div>
                <textarea value="@_seleniumScaffolderSettingsInput" @onchange="@((args) => _seleniumScaffolderSettingsInput = args.Value.ToString())" class="form-control code-input" id="seleniumScaffolderSettingsTextArea" rows="2"></textarea>
            </div>
            <div class="mb-3">
                <div class="head">Input Page Elements</div>
                <textarea value="@_bulkImportPageElementsInput" @onchange="@((args) => _bulkImportPageElementsInput = args.Value.ToString())" class="form-control code-input" id="bulkImportPageElementsTextArea" rows="10"></textarea>
            </div>
            <div class="mb-1">
                <button class="button-primary" @onclick="SubmitBulkImportPageElements">Submit</button>
            </div>
        </div>
    </div>
}

@if (_pageElements.Any())
{
    <div class="row pt-4">
        <div class="col-12">
            <h5 class="head">Page Elements</h5>
        </div>
        <div class="col-12">
            <table class="table table-sm table-responsive">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Element Type</th>
                        <th scope="col">Find By Method</th>
                        <th scope="col">Find By Expression</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pageElement in _pageElements)
                    {
                        <tr>
                            <td>@pageElement.Name</td>
                            <td>@pageElement.Type.Name</td>
                            <td>@pageElement.Locator.Type.Method</td>
                            <td>@pageElement.Locator.ByExpression</td>
                        </tr>
                    }
                    <!--
                    <tr>
                        <td>
                            <input class="form-control form-control-sm" type="text" placeholder="FirstNameTxt">
                        </td>
                        <td>
                            <select class="form-select form-select-sm">
                                <option selected value="TextBox">Text Box</option>
                                <option value="RadioButton">Radio Button</option>
                                <option value="Button">Button</option>
                            </select>
                        </td>
                        <td>
                            <select class="form-select form-select-sm">
                                <option selected value="Id">Id</option>
                                <option value="CssSelector">CssSelector</option>
                                <option value="XPath">XPath</option>
                            </select>
                        </td>
                        <td>
                            <input class="form-control form-control-sm" type="text" placeholder="firstNameTxt">
                        </td>
                    </tr>
                    -->
                </tbody>
            </table>
        </div>
    </div>
}

@if (_pageElements.Any())
{
    <div class="col-12 pt-4">
        <div class="head">
            Web Elements
        </div>
        <div class="code-output">
            <code>@GetPageElementWebElements()</code>
            <div class="pt-3">
                <button type="button" class="btn btn-secondary btn-sm" @onclick="CopyWebElementsTextToClipboard">Copy</button>
            </div>
        </div>
    </div>

    <div class="col-12 pt-4">
        <div class="head">
            Element Interactions
        </div>
        <div class="code-output">
            <code>@GetPageElementInteractions()</code>
            <div class="pt-3">
                <button type="button" class="btn btn-secondary btn-sm" @onclick="CopyElementInteractionsTextToClipboard">Copy</button>
            </div>
        </div>
    </div>
}

@if (_pageElementGroupings != null && _pageElementGroupings.Any())
{
    @foreach (var grouping in _pageElementGroupings)
    {
        <div class="col-12 pt-4">
            <div class="head">
                @grouping.Name
            </div>
            <div class="code-output">
                <code>
                    @grouping.ProcessedOutput
                </code>
                <div class="pt-3">
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="() => CopyPageElementGroupingTextToClipboard(grouping)">Copy</button>
                </div>
            </div>
        </div>
    }
}

@if (_seleniumScaffolderSettings != null)
{
    <div class="dotted-line"></div>
    <div class="row pt-3">
        <h5>Selenium Scaffolder Settings</h5>
        <div class="col-8">
            <div class="head">Page Element Types</div>
            <div class="accordion accordion-flush" id="accordianElementTypes">
                @foreach (var elementType in _seleniumScaffolderSettings.PageElementTypes.OrderBy(x => x.Name))
                {
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="elementTypeHeader-@elementType.Name">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#elementTypeCollapse-@elementType.Name" aria-expanded="false" aria-controls="elementTypeCollapse-@elementType.Name">
                                @elementType.Name
                            </button>
                        </h2>
                        <div id="elementTypeCollapse-@elementType.Name" class="accordion-collapse collapse" aria-labelledby="elementTypeHeader-@elementType.Name" data-bs-parent="#accordianElementTypes">
                            <div class="accordion-body">
                                <h6 class="text-muted">Abbreviations</h6>
                                <ul class="list-group list-group-flush">
                                    @foreach (var abbreviation in elementType.Abbreviations)
                                    {
                                        <li class="list-group-item">@abbreviation</li>
                                    }
                                </ul>
                                <br />
                                <h6 class="text-muted">Web Elements</h6>
                                <code>@elementType.WebElements.Trim()</code>
                                <br />
                                <h6 class="text-muted">Interactions</h6>
                                <code>@elementType.Interactions.Trim()</code>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-4">
            <div class="head">Page Element Locator Types</div>
            <div class="accordion accordion-flush" id="accordianElementLocatorTypes">
                @foreach (var elementLocatorType in _seleniumScaffolderSettings.PageElementLocatorTypes.OrderBy(x => x.ByType).ThenBy(x => x.Method))
                {
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="locatorTypeHeader-@elementLocatorType.ByType-@elementLocatorType.Method">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#locatorTypeCollapse-@elementLocatorType.ByType-@elementLocatorType.Method" aria-expanded="false" aria-controls="locatorTypeCollapse-@elementLocatorType.ByType-@elementLocatorType.Method">
                                @elementLocatorType.ByType @elementLocatorType.Method
                            </button>
                        </h2>
                        <div id="locatorTypeCollapse-@elementLocatorType.ByType-@elementLocatorType.Method" class="accordion-collapse collapse" aria-labelledby="locatorTypeHeader-@elementLocatorType.ByType-@elementLocatorType.Method" data-bs-parent="#accordianElementLocatorTypes">
                            <div class="accordion-body">
                                <h6 class="text-muted">Abbreviations</h6>
                                <ul class="list-group list-group-flush">
                                    @foreach (var abbreviation in elementLocatorType.Abbreviations)
                                    {
                                        <li class="list-group-item">@abbreviation</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="row pt-3">
        <div class="col-8">
            <div class="head">Page Element Groupings</div>
            <div class="accordion accordion-flush" id="accordianElementGroupings">
                @foreach (var elementGrouping in _seleniumScaffolderSettings.PageElementGroupings.OrderBy(x => x.Name))
                {
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="elementGroupingHeader-@elementGrouping.Name.RemoveWhitespace()">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#elementGroupingCollapse-@elementGrouping.Name.RemoveWhitespace()" aria-expanded="false" aria-controls="elementGroupingCollapse-@elementGrouping.Name.RemoveWhitespace()">
                                @elementGrouping.Name
                            </button>
                        </h2>
                        <div id="elementGroupingCollapse-@elementGrouping.Name.RemoveWhitespace()" class="accordion-collapse collapse" aria-labelledby="elementGroupingHeader-@elementGrouping.Name.RemoveWhitespace()" data-bs-parent="#accordianElementGroupings">
                            <div class="accordion-body">
                                <h6 class="text-muted">Element Types</h6>
                                <ul class="list-group list-group-flush">
                                    @foreach (var groupingElementType in elementGrouping.PageElementGroupingElementTypes)
                                    {
                                        <li class="list-group-item">
                                            @groupingElementType.Name
                                            <br />
                                            <code>@groupingElementType.Output</code>
                                        </li>
                                    }
                                </ul>
                                <br />
                                <h6 class="text-muted">Output</h6>
                                <code>@elementGrouping.Output.Trim()</code>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private string _seleniumScaffolderSettingsInput;

    private string _bulkImportPageElementsInput;

    private SeleniumScaffolderSettings _seleniumScaffolderSettings;

    private PageElementScaffolder _pageElementScaffolder;

    private List<PageElement> _pageElements = new List<PageElement>();

    private List<PageElementGrouping> _pageElementGroupings;

    protected override async Task OnInitializedAsync()
    {
        _seleniumScaffolderSettingsInput = await Http.GetStringAsync("page-element-settings/SeleniumScaffolderSettings.yml");
        _seleniumScaffolderSettings = new SeleniumScaffolderSettings(_seleniumScaffolderSettingsInput);
    }

    private void SubmitBulkImportPageElements()
    {
        _seleniumScaffolderSettings = new SeleniumScaffolderSettings(_seleniumScaffolderSettingsInput);
        _pageElementScaffolder = new PageElementScaffolder(_seleniumScaffolderSettings);

        _pageElements = _pageElementScaffolder.ReadStringToPageElements(_bulkImportPageElementsInput);

        _pageElementGroupings = _pageElementScaffolder.GeneratePageElementGroupings(_pageElements);
    }

    private string GetPageElementWebElements()
    {
        return string.Join("\n", _pageElements.Select(element => element.WebElements)).Trim();
    }

    private string GetPageElementInteractions()
    {
        return string.Join("\n", _pageElements.Select(element => element.Interactions)).Trim();
    }

    private async Task CopyWebElementsTextToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", GetPageElementWebElements());
    }

    private async Task CopyElementInteractionsTextToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", GetPageElementInteractions());
    }

    private async Task CopyPageElementGroupingTextToClipboard(PageElementGrouping grouping)
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", grouping.ProcessedOutput);
    }
}
